## CI/CD-конвейер: основные понятия и назначение

### Что такое CI/CD?
CI/CD (Continuous Integration / Continuous Delivery / Continuous Deployment) — это методология автоматизации процессов интеграции, тестирования и доставки приложений, позволяющая быстро выпускать изменения и минимизировать человеческий фактор.

- **Continuous Integration (CI)** — непрерывная интеграция: автоматическая проверка кода на ранних этапах разработки.
- **Continuous Delivery (CD)** — непрерывная доставка: готовность в любой момент развернуть протестированное приложение в окружении.
- **Continuous Deployment (CD)** — непрерывное развёртывание: полностью автоматическое развёртывание приложения в продакшн.

### Зачем нужен CI/CD-конвейер?
- Автоматизация рутинных задач.
- Ускорение разработки и выпуска новых версий.
- Повышение качества и стабильности приложений.
- Снижение количества ошибок из-за человеческого фактора.
- Улучшение обратной связи и быстрая реакция на ошибки.

### Этапы CI/CD-конвейера
- **Написание и версионирование кода** (система контроля версий, например, Git).
- **Сборка кода** (компиляция, установка зависимостей, создание артефактов).
- **Тестирование кода** (юнит-тесты, статический анализ, поиск уязвимостей).
- **Развёртывание приложения** (доставка и установка на целевые окружения).
- **Тестирование развёрнутого приложения** (функциональные и интеграционные тесты).

### Преимущества Kubernetes для CI/CD
- Автоматическое создание и удаление окружений без ручной настройки виртуальных машин.
- Гибкое управление ресурсами и масштабирование.
- Изоляция и унификация окружений (снижение рисков при переносе приложений).
- Быстрая доставка изменений от коммита до развёртывания.

### Инструменты для CI/CD
- Jenkins
- GitLab CI
- GitHub Actions
- TeamCity
- Jenkins X
- Tekton Pipelines

### Настройка версионирования в GitLab
Версионирование — это критически важный процесс для эффективного управления приложениями. В GitLab CI его можно автоматизировать с помощью встроенных переменных окружения и механизма артефактов:
- Используйте **SemVer (семантическое версионирование)** для релизов (формат MAJOR.MINOR.PATCH).
- Избегайте использования тега `latest` для всех версий.
- Автоматизируйте версионирование с помощью переменных окружения GitLab (например, `CI_COMMIT_SHA`, `CI_PIPELINE_ID`).
- Передавайте версии между этапами конвейера, используя артефакты.
- Согласованные версии для приложения, образа и Helm-чарта обеспечивают отслеживаемость и воспроизводимость.

### Лучшие практики CI/CD
- **Единый конвейер:** интеграция всех этапов в одном процессе.
- **Маленькие и частые коммиты:** контроль качества и простота локализации ошибок.
- **Оптимальный баланс:** время выполнения сборок не более 5 минут.
- **Регулярный анализ результатов сборок:** оперативное исправление проблем.

